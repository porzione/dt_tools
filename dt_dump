#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'chronic'
require 'active_support/core_ext/object/blank'
require 'oj'
require_relative 'models'

# raw (sql) is always better
class Dumper
  GEO_SQL = DT::GEO.map(&:to_s).join(',')

  SQL_META = 'SELECT key, value FROM meta_data WHERE id=?'
  SQL_IMGS = <<~SQL
  SELECT id, filename, version, write_timestamp, #{GEO_SQL},datetime_taken tt
  FROM images WHERE film_id=? %sORDER BY filename, version
  SQL
  SQL_TAGS = <<~SQL
  SELECT name FROM used_tags
  JOIN tagged_images ON tagid=id WHERE imgid=?
  SQL

  def initialize
    @o = Struct.new(:since_e, :since_t, :tt).new
    OptionParser.new do |opts|
      opts.on('-s time', 'Since edit')  { |t| @o.since_e = t }
      opts.on('-S time', 'Since taken') { |t| @o.since_t = t }
      opts.on('-t', 'Dump time taken')  { @o.tt = true }
    end.parse!
    if @o.since_e
      t = Chronic.parse(@o.since_e, context: :past)
      abort 'bad time since' unless t
      @since = t.to_i
      warn "since: #{t} #{@since}"
      where = 'AND write_timestamp>=? '
    elsif @o.since_t
      t = Chronic.parse(@o.since_t, context: :past)
      abort 'bad time since' unless t
      @since = t.strftime('%Y:%m:%d %T')
      warn "since: #{t} #{@since}"
      where = 'AND datetime_taken>=? '
    end
    @sql_imgs = SQL_IMGS % where
    @lib = Image.db
  end

  def go
    data = {}
    FilmRoll.select(:id, :folder).order(:folder).each do |r|
      dir = r.folder
      d = {}
      where = [r.id]
      where << @since if @since
      # warn "#{@sql_imgs} #{where}"
      @lib.fetch(@sql_imgs, *where).each do |i|
        meta = {
          t: i[:write_timestamp],
          k: get_meta_k(i[:id])
        }
        meta[:tt] = i[:tt] if @o.tt && !i[:tt].blank?
        geo = i.slice(*DT::GEO).values.compact.map(&:to_s)
        meta[:geo] = geo unless geo.empty?
        tags = get_tags(i[:id])
        meta[:tags] = tags unless tags.empty?
        d[i[:filename]] ||= {}
        d[i[:filename]][i[:version]] = meta
      end
      data[dir] = d unless d.empty?
    end
    puts Oj.dump(data, indent: 2, mode: :compat)
  end

  private

  def get_tags(imgid)
    @lib
      .fetch(SQL_TAGS, imgid)
      .map { |t| t[:name] }
      .reject { |t| t.match?(/^darktable\|.+/) }
      .sort
  end

  def get_meta_k(imgid)
    @lib
      .fetch(SQL_META, imgid)
      .map(&:values)
      .to_h
  end
end

Dumper.new.go
