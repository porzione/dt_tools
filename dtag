#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative 'models'

def tag_id(name)
  tag = Tag.find(name: name) || abort("no tag '#{name}'")
  tag.id
end

o = Struct.new(:delete_tag, :rename_tag, :new_tag, :st_tag).new
OptionParser.new do |opts|
  opts.on('-d TAG', 'Delete tag') { |t| o.delete_tag = t }
  opts.on('-r TAG', 'Rename tag') { |t| o.rename_tag = t }
  opts.on('-n TAG', 'New name')   { |t| o.new_tag = t }
  opts.on('-s TAG', 'Stats')      { |t| o.st_tag = t }
end.parse!

if o.delete_tag
  id = tag_id(o.delete_tag)
  puts "id: #{id}"
  printf "tags: %d\n", Tag.where(id: id).delete
  printf "used_tags: %d\n", UsedTag.where(id: id).delete
  printf "tagged_images: %d\n", TaggedImage.where(tagid: id).delete
elsif o.rename_tag && o.new_tag
  puts Tag.where(name: o.rename_tag).update(name: o.new_tag)
  puts UsedTag.where(name: o.rename_tag).update(name: o.new_tag)
  Tag.where(Sequel.like(:name, "%#{o.rename_tag}%")).each do |row|
    new_name = row.name.sub o.rename_tag, o.new_tag
    res = Tag.where(id: row.id).update(name: new_name)
    puts "#{row.name} -> #{new_name}: #{res}"
  end
  like = Sequel.like(:name, "%#{o.rename_tag}%")
  UsedTag.where(like).each do |row|
    new_name = row.name.sub o.rename_tag, o.new_tag
    res = UsedTag.where(id: row.id).update(name: new_name)
    puts "#{row.name} -> #{new_name}: #{res}"
  end
elsif o.st_tag
  id = tag_id(o.st_tag)
  puts "id: #{id}"
  printf "tagged_images: %d\n", TaggedImage.where(tagid: id).count
else
  Tag.order(:name).each { |r| puts r.name }
end
