#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative 'models'

class Tagger
  def initialize
    @o = Struct.new(:delete_tag, :rename_tag, :new_tag, :st_tag).new
    OptionParser.new do |opts|
      opts.on('-d TAG', 'Delete tag')      { |t| @o.delete_tag = t }
      opts.on('-r TAG', 'Rename tag')      { |t| @o.rename_tag = t }
      opts.on('--rs TAG', 'Ren substring') { |t| @o.rename_sub = t }
      opts.on('-n TAG', 'New name')        { |t| @o.new_tag = t }
      opts.on('-s TAG', 'Stats')           { |t| @o.st_tag = t }
    end.parse!
  end

  def go
    if @o.delete_tag
      delete(@o.delete_tag)
    elsif @o.rename_tag && @o.new_tag
      rename(@o.rename_tag, @o.new_tag)
    elsif @o.rename_sub && @o.new_tag
      rename(@o.rename_sub, @o.new_tag)
    elsif @o.st_tag
      stats(@o.st_tag)
    else
      list
    end
  end

  def list
    UsedTag
      .join(:tagged_images, tagid: :id)
      .group_and_count(:name)
      .order(:name)
      .each { |r| puts '%-5d %s' % [r[:count], r[:name]] }
  end

  def tag_id(name)
    tag = Tag.find(name: name) || abort("no tag '#{name}'")
    tag.id
  end

  def delete(name)
    id = tag_id(name)
    puts "id: #{id}"
    printf "tags: %d\n", Tag.where(id: id).delete
    printf "used_tags: %d\n", UsedTag.where(id: id).delete
    printf "tagged_images: %d\n", TaggedImage.where(tagid: id).delete
  end

  # TODO: rename to existing name
  def rename(oldt, newt)
    abort('no such tag') unless (old_id = tag_id(oldt))
    if (new_id = tag_id(newt))
      warn("new tag '#{newt}' exist (#{new_id})")
      abort
      TaggedImage.where(tagid: old_id).update(tagid: new_id)
      puts Tag.where(name: oldt).update(name: newt)
      puts UsedTag.where(name: oldt).update(name: newt)
    else
      puts Tag.where(name: oldt).update(name: newt)
      puts UsedTag.where(name: oldt).update(name: newt)
    end
  end

  def rename_sub(oldt, newt)
    like = Sequel.like(:name, "%#{oldt}%")
    Tag.where(like).each do |row|
      new_name = row.name.sub oldt, newt
      res = Tag.where(id: row.id).update(name: new_name)
      puts "#{row.name} -> #{new_name}: #{res}"
    end
    UsedTag.where(like).each do |row|
      new_name = row.name.sub oldt, newt
      res = UsedTag.where(id: row.id).update(name: new_name)
      puts "#{row.name} -> #{new_name}: #{res}"
    end
  end

  def stats(name)
    id = tag_id(name)
    puts "id: #{id}"
    printf "tagged_images: %d\n", TaggedImage.where(tagid: id).count
  end
end

Tagger.new.go
